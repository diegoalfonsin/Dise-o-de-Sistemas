-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------TP INTEGRADOR-----------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------



clase Usuario
	atributo user :int
	atributo nombre :string
	atributo apellido :string
	atributo pass :string
	atributo sexo :char
	atributo fecha_alta :int
	atributo email :string
	atributo edad :int
	
	metodo iniciarSesion(user:int, pass:int)
	if control user y pass 
	then
		mensaje "Bienvenido al sistema"
	else
		error "Ingreso incorrecto"
	fin	
	
fin
	




clase Administrador [hereda Usuario]  
  
	atributo  id_Administrador :int
	atributo  partidosCreados :string
  
	metodo crearPartido ( unPartido:Partido)
		unPartido.canchaDesingada()
		agregar unPartido a partidosCreados 
	fin
	metodo eliminarPartido (unPartido:int)
		eliminar unPartido de partidosCreados
	fin
	
	metodo aceptarSolicitud(unaSolicitud:Solicitud) 
		unaPropuesta.aceptar()
	fin
	
	metodo generarEquiposTentativos(unPartido:Partido)
		unPartido.armarEquiposTentativos()
	fin
	
	metodo seleccionarNivelJugador(unJugador:Jugadores, nivel)
		unJugador.nivelDeJuego:= nivel
	fin
fin

clase Jugadores [hereda Usuario]

	atributo id_jugador :int
	atributo tipo_jugador :string
	atributo amigos :string
	atrubuto penalizacion :boolean
	
	metodo inscribirseAPartido(unPartido:int, id_jugador:int)
		cuando size unPartido.jugadores_inscriptos < 10 entonces [
		agregar id_jugador a unPartido.jugadores_inscriptos
		mail := Mail new
		stubMailSender.enviarALista(mail,amigos)
			cuando size unPartido.jugadores_inscriptos = 10 entonces [
			mailAdmin := Mail new
			stubMailSender.notificacionAdminstrador(mailAdmin)
		]
		]
	fin


	metodo bajaDeUnPartido(unPartido:int, id_jugador:int)
		cuando size unPartido.jugadores_inscriptos = 10 entonces confirmado=True
		eliminar id_jugador de unPartido.jugadores_inscriptos
		jugadorQueReemplaza := ()
		cuando jugadorQueReemplaza=NULL entonces [
			cuando confirmado=True entonces[
				mailAdmin := Mail new
				stubMailSender.notificacionAdminstrador(mail)
				]
			penalizacion := True
			] 
		else [
			agregar jugadorReemplazo a unPartido.jugadores_inscriptos	
			]
	
	fin
	metodo registrarseAlSistema()
		setear atributos
		agregar self a Administrador.usuariosRegistrados
	fin

	metodo calificatePor(jugadorCalificador, partidoCalificado, nota, critica)
		Calificacion calificacion = new Calificacion(jugadorCalificador, partidoCalificado, nota, string)
		calificaciones agregar calificacion
	fin
	
	
fin

clase Partido

	atributo fecha_Partido :int
	atributo horario :int
	atributo id_Partido :int
	atributo jugadores_inscriptos :int
	atributo nro_de_cancha :int

	metodo canchaDesignada(unaCancha:int)
		asignar unaCancha a nro_de_cancha
	fin
	metodo calificarA(jugadorCalificado, jugadorCalifica, nota, critica)
		jugadorCalificado.calificatePor(jugadorCalifica,this,nota,cirtica)
	fin
	
	metodo armarEquiposTentativos()
		confirmarJugadores()
		ordenarConfirmados()
		distribuirEquipos()
	fin
	
	metodo ordenarConfirmados()
		criterioOrden.ordenador(jugadores_confirmados)
	fin
	
	metodo distribuirEquipos()
		criterioDistribucion.distribuirEquipos(jugadores_confirmados, equipo1, equipo2)
	fin
fin

Clase PorHandicap [hereda CriterioDeOrden]
	metodo ordenador(listaJugadores:int)
		sort(jugador, jugador.nivelDeJuego(), listaJugadores)
	fin
fin

Clase PorPromedioCalificacionNPartidos [hereda CriterioDeOrden]
	metodo ordenador(listaJugadores:int)
		sort(jugador, jugador.promedioCalificacionesNPartidos(cantidadCalificaciones), listaJugadores)
	fin
fin

Clase PorCalificacionUltimoPartido [hereda CriterioDeOrden]
	metodo ordenador(listaJugadores:int)
		sort(jugador, jugador.calificacionUltimoPartido(), listaJugadores)
	fin
fin

Clase CriterioMixto [hereda CriterioDeOrden]
	metodo ordenador(listaJugadores:int)
		n:= 0
		while n < (cantidad listaCriterios)
			(listaCriterios at: n).ordenador()
			n := n+1
		fin
	fin
fin

Clase ParImpar [hereda CriterioDeDistribucion]
	metodo distribuir(listaJugadores, equipo1, equipo2)
		i := 0
		while i<>10
			i := i+1
			if mod(i,2)=1 entonces
				equipo 1 add (listaJugadores at: i)
			fin
			if mod(i,2)=0 entonces
				equipo 2 add (listaJugadores at: i)
			fin	
		fin
	fin
fin
	
clase Mail

	atributo from :string
	atributo to :string
	atributo asunto :string
	atributo mensajes :string
		
fin

clase Solicitud
	atributo partido:Partido
	atributo usuario:Usuario
	
	metodo aceptar()
		partido.inscribirA(usuario)
	fin
	
fin

	